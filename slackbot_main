from __future__ import print_function
from slackclient import SlackClient
from oauth2client.service_account import ServiceAccountCredentials
from googleapiclient.discovery import build
from httplib2 import Http
from difflib import get_close_matches

import gspread
import logging
import os
import time
import re

logging.getLogger('googleapiclient.discovery_cache').setLevel(logging.ERROR)

# instantiate Slack client
slack_client = SlackClient('---')
starterbot_id = None

# constants / global constants
RTM_READ_DELAY = 1 # 1 second delay between reading from RTM
commandCheck = "check"
commandTrade = "trade"
commandDraft = "draft"
commandSystem = 'farm system'
commandMatchup = "matchup"
MENTION_REGEX = "^<@(|[WU].+?)>(.*)"
allPlayers = 'error'

# Call the Sheets API

scope = ['https://spreadsheets.google.com/feeds',
         'https://www.googleapis.com/auth/drive']
creds = ServiceAccountCredentials.from_json_keyfile_name('projecteditor.json', scope)
client = gspread.authorize(creds)

sheet = client.open("---")
farmSheet = sheet.worksheet("farmDraft")
nameSheet = sheet.worksheet("slackNameMapping")
weeklyData = sheet.worksheet('weeklyData')
finalRosters = sheet.worksheet('finalRosters')
transactions = sheet.worksheet('transactions')

allPlayers = farmSheet.get_all_values()

commandSender = None

def find_farm_name(name):
    nameReturn = nameSheet.find(name)
    return nameSheet.cell(nameReturn.row, 5).value

def find_player_name(name):
    try:
        nameReturn = farmSheet.find(name)
        nameCheck = farmSheet.cell(nameReturn.row, 10).value
    except:
        nameCheck = "Player Not Found"
    return nameCheck

def find_player_level(name):
    try:
        cell = farmSheet.find(name)
        cellReturn = farmSheet.cell(cell.row, 17).value
    except:
        cellReturn = "Player Not Found"
    return cellReturn

# def find_matchup(matchup_1, matchup_2):
#     if !weeklyData.find(matchup_1):
#         cells = weeklyData.find(matchup_2)
#     else:
#         cells = weeklyData.find(matchup_1)


def parse_bot_commands(slack_events):
    """
        Parses a list of events coming from the Slack RTM API to find bot commands.
        If a bot command is found, this function returns a tuple of command and channel.
        If its not found, then this function returns None, None.
    """
    for event in slack_events:
        if event["type"] == "message" and not "subtype" in event:
            user_id, message = parse_direct_mention(event["text"])
            if user_id == starterbot_id:
                return message, event["channel"], event["user"]
            else:
                return commandSender

    return None, None, None

def parse_direct_mention(message_text):
    """
        Finds a direct mention (a mention that is at the beginning) in message text
        and returns the user ID which was mentioned. If there is no direct mention, returns None
    """
    matches = re.search(MENTION_REGEX, message_text)
    # the first group contains the username, the second group contains the remaining message
    return (matches.group(1), matches.group(2).strip()) if matches else (None, None)


def handle_command(command, channel, user):
    """
        Executes bot command if the command is known
    """

    # Default response is help text for the user
    default_response = "Not sure what you mean. Try *{}*".format(commandCheck)

    # Finds and executes the given command, filling in response
    response = None
    commandAll = command.split()
    commandSender = user
    commandTrigger = commandAll[0]
    commandTrigger2 = commandAll[0]+ ' ' + commandAll[1]

    if commandTrigger == commandCheck:
        commandPlayer = str.title(commandAll[1] + ' ' +  commandAll[2])
        playerLevel = find_player_level(commandPlayer)
        playerRights = find_player_name(commandPlayer)
        response = ("Name: {}".format(commandPlayer)+" Level: {}".format(playerLevel)+" Rights: {}".format(playerRights))

    elif commandTrigger == commandTrade:
        commandPlayer = str.title(commandAll[1] + ' ' +  commandAll[2])
        #validate if this person is eligible for trade
        owner =  find_player_name(commandPlayer)
        level = find_player_level(commandPlayer)
        try:
            cell = farmSheet.find(commandPlayer)
        except:
            cell = 'Player Not Found'

        if level == 'CPL':
            response = ('Not Farm Eligible, trade in Yahoo only.')
        elif owner == 'Player Not Found':
            #if this results in an erro we need to return:
            response = 'Player name incorrect or is not farm eligible.'
        else:

        #who is the sender? Need to validate they have the rights to trade this person
            senderName = find_farm_name(commandSender)
            commandPlayer = str.title(commandAll[1] + ' ' +  commandAll[2])
            playerRights = find_player_name(commandPlayer)


            if senderName != playerRights:
                response = 'You do not have the rights to trade this player.'
            else:
                commandReceiver = commandAll[4]
                receiverName = find_farm_name(commandReceiver)

            #pass name back into farmDraft file to finish trade
                updCol = 10
                farmSheet.update_cell(cell.row,updCol, receiverName)

                tradeCount = int(farmSheet.cell(cell.row,12).value)
                farmSheet.update_cell(cell.row,12, tradeCount + 1)
                response = "Trade of {}".format(commandPlayer) + " from {}".format(senderName) + " to {}".format(receiverName) + ' completed.'

    elif commandTrigger2 == commandSystem:
        commandOwner = commandAll[2]
        ownerName = find_farm_name(commandOwner)
        print(ownerName)

        for sublist in allPlayers:
            if (sublist[9] == ownerName and sublist[16] == 'Farm'):
                playerName = sublist[4]
                playerPos = sublist[5]
                print(playerName)
                print(playerPos)
                response = 'Name: ' + playerName + ' Pos: '+ playerPos
                slack_client.api_call(
                    "chat.postMessage",
                    channel=channel,
                    text= response or default_response
                )
        response = 'Done'
    else:
        response = "There was an issue. Contact @blacktj"

    #generic response inside current channel
    if commandTrigger2 == commandSystem:
        response = None
    else:
        slack_client.api_call(
            "chat.postMessage",
            channel=channel,
            text= response or default_response
        )
        #add a response to the main trades channel if we're not already in it
        if (commandTrigger == commandTrade and channel != 'CE96NEXAQ' and owner != 'Player Not Found'):
            #sends slack response
            slack_client.api_call(
                "chat.postMessage",
                channel='CE96NEXAQ',
                text= response
                )
        else:
            return None


if __name__ == "__main__":
    if slack_client.rtm_connect(with_team_state=False):
        print("Farm Bot connected and running!")
        # Read bot's user ID by calling Web API method `auth.test`
        starterbot_id = slack_client.api_call("auth.test")["user_id"]
        while True:
            command, channel, user = parse_bot_commands(slack_client.rtm_read())
            if command:
                handle_command(command, channel, user)
            time.sleep(RTM_READ_DELAY)
    else:
        print("Connection failed. Exception traceback printed above.")
